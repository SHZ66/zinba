#summary How to use ZINBA
<wiki:toc max_depth="2" />

= Using ZINBA =
A <a href="test_data.tgz">test dataset</a> has been created that corresponds to the example code given in each function used below. 

=Necessary file downloads=
Before using Zinba, you need two files before you can start your analysis, given below.   

==1. Genome Build==
The build of the genome you are using in .2bit format, downloadable below.  Also downloadable from the from the <a href=" http://hgdownload.cse.ucsc.edu/downloads.html">UCSC genome browser</a>. NOTE: YOUR DOWNLOADED BUILD MUST BE THE SAME BUILD THAT YOUR READS WERE MAPPED TO. 
||*Human*||*Mouse*||*Drosophila*||*C. Elegans*||
||<a href="http://hgdownload.cse.ucsc.edu/goldenPath/hg18/bigZips/hg18.2bit"  >hg18</a>||<a href="http://hgdownload.cse.ucsc.edu/goldenPath/mm8/bigZips/mm8.2bit"  >mm8</a>||<a href="http://www.bios.unc.edu/~nrashid/dm3.2bit" >dm3</a>||<a href="http://www.bios.unc.edu/~nrashid/ce4.2bit">ce4</a>||
||<a href="http://hgdownload.cse.ucsc.edu/goldenPath/hg18/bigZips/hg19.2bit"  >hg19</a>||<a href="http://hgdownload.cse.ucsc.edu/goldenPath/mm9/bigZips/mm9.2bit"  >mm9</a>|| ||<a href="http://www.bios.unc.edu/~nrashid/ce6.2bit">ce6</a>|| 

	
==2. Mappability File==
A mappability folder corresponding to your <u>sequencing read length</u> and <u>genome</u> (links to compressed files are below).  These files were generated using code from <a href="www.gersteinlab.org/proj/PeakSeq">Peakseq </a>, developed by the Gerstein Lab. This file is used to derive final mappability score in ZINBA.

||*Human*||*Mouse*||*Drosophila*||*C. Elegans*||
||<a href="http://www.bios.unc.edu/~nrashid/map36.tgz"  >hg18 36bp</a><br><a href="http://www.bios.unc.edu/~nrashid/map50.tgz"  >hg18 50bp</a> || ||<a href="http://www.bios.unc.edu/~nrashid/map36_dm3.tgz"  >dm3 36bp</a>||<a href="http://www.bios.unc.edu/~nrashid/map36_ce4.tgz"  >ce4 36bp</a> ||
||<a href="http://www.bios.unc.edu/~nrashid/map36_hg19.tgz"  >hg19  36bp</a><br><a href="http://www.bios.unc.edu/~nrashid/map50_hg19.tgz"  >hg19 50bp</a> ||<a href="http://www.bios.unc.edu/~nrashid/map36_mm9.tgz"  >mm9 36bp</a><br><a href="http://www.bios.unc.edu/~nrashid/map50_mm9.tgz"  >mm9 50bp</a> ||||<a href="http://www.bios.unc.edu/~nrashid/map36_ce6.tgz"  >ce6 36bp</a>|| 


=Preparing your files=
  # Unpack your downloaded mappability folder by changing to the directory it is located in and running the command below, where ## is the specific name/number corresponding to the file 
{{{
wget http://www.bios.unc.edu/~nrashid/map##.tgz
tar -xzvf map##.tar.gz
}}} 
  # Enter R and feed the unpacked mappability folder to the generateAlignability() function to generate your alignability directory. You do not need to compute this again unless you are running samples mapped with different alignability thresholds (athresh) or whose sequencing library has a different average fragment length (extension)
{{{  
generateAlignability(
   mapdir=      #mappability directory from unpacked mappability files
   outdir=      #directory for processed files, used later in analysis
   athresh=     #number of hits per read allowed during mapping process
   extension=   #average fragment library length
   twoBitFile=  #path to downloaded genome build file in .2bit format
)
}}} 
  # Run the basealigncount function to generate the basecount file needed to obtain exact peak boundaries through peak refinement.  If peak refinement is not desired then this step can be skipped.  Otherwise, this should be generated for each set of sample reads you are analyzing.  In most cases the unrefined estimates should be sufficient.
{{{
basealigncount(
   inputfile=  #mapped sample reads
   outputfile= # output path
   extension=  #average fragment library length 
   filetype=   #either "bed", "bowtie", or "tagAlign"
   twoBitFile= #path to downloaded genome build file in .2bit format
)
}}}


=Analyze your Data=
==ZINBA pipeline function==
Usage for the ZINBA pipeline function
{{{
zinba(
  align=         #path to alignability directory
  numProc=       #CPUs to use, must be less than max available
  seq=           #path to mapped experimental reads
  basecountfile= #path to basecount file, if refinepeaks is 1
  filetype=      #either 'bed', 'bowtie', or 'tagAlign'
  outfile=       #prefix for outputted files
  twoBit=        #path to genome build in .2bit format
  extension=  #average fragment library length (size selected)
  printFullOut=  #print original data with enrichment estimates, 1 for yes, 0 for no (saves space)
  refinepeaks=   #refine peaks?  1 for yes, 0 for no
  broad=         #broad setting (TRUE or FALSE)?
  input=         #Path to mapped input reads, if available
  interaction=   #whether or not to considering interaction during model selection (TRUE or FALSE)
)
}}}

This function is optimized for speed and for ease of use and for speed, utilizing only input if available.  A more flexible function run.zinba is available where more parameters can be specified. 
    
==FAIRE-seq example==
FAIRE data example: sequencing reads are 36 bp in length, and correspond to a fragment library length of 134 base pairs. The mappability file is unpacked, unloading the map36/ folder with the mappability files contained in it. We create the alignability directory at align_athresh4_extension134/, where our reads were mapped with an alignability threshold of matching up to 4 regions in the genome (otherwise they were filtered out). Download the necessary files, unpack your mappability directory, and create a directory to place your alignability files. Open a terminal and run the following, corresponding to the test dataset unpacked (a data/ directory will be created wherever you unpacked it). 

{{{
#open a terminal and download the necessary files and test dataset.  
#on the mac, use curl -O instead of wget
wget http://hgdownload.cse.ucsc.edu/goldenPath/hg18/bigZips/hg18.2bit
wget http://www.bios.unc.edu/~nrashid/map36.tgz
wget http://www.unc.edu/~nur2/zinbaweb/test_data.tgz

#unpack your mappability folder and test datasets
tar -xzvf map36.tgz
tar -xzvf test_data.tgz

#create your directory to hold your alignability files.  You can do this anyway you please, terminal command is below
mkdir align_athresh4_extension134
}}}

Enter R and generate your alignability directory in addition to your basecount file 
{{{
library(zinba)
generateAlignability(
   mapdir='map36/',
   outdir='align_athresh4_extension134/',
   athresh=4,
   extension=134,
   twoBitFile='hg18.2bit'
)   

basealigncount(
   inputfile='data/faireGM12878rep1chr22.taf',
   outputfile='data/faireGM12878rep1chr22.basecount', 
   extension=134, 
   filetype='tagAlign',
   twoBitFile='hg18.2bit'
)

}}}

Now, run your zinba analysis. Here we start from our mapped sample reads and our prepared files, build the datasets needed for analysis, run the mixture regression model with the model selection specified, and then run a peak boundary refinement to capture exact peak boundaries. This function is our pipeline function, tying together the smaller functions that work on different parts of the analysis. The steps are detailed in the diagram at the top of this page, and details how to access and use the individual functions are given in the function reference section of this website. We choose to run the model selection function in this case because we do not know which parameters are best to model each component of signal in the data. We default to the default model selection method by not specifying "selecttype". Because input control was not available for this data, this function only considers the covariates GC content, mappability, and our estimate for local background to model the data. 

{{{
zinba(
	align='align_athresh4_extension134/',
	numProc=4,
	seq='data/faireGM12878rep1chr22.taf',
	basecountfile='data/faireGM12878rep1chr22.basecount',
	filetype="tagAlign",
	outfile="data/faire",
	twoBit="hg18.2bit",
	extension=134,
	printFullOut=1,
	refinepeaks=1,
	broad=F,
	input="none"
)

    
}}}
==ChIP-seq example==
ChIP-seq data example: sequencing reads are 36 bp in length, and correspond to a fragment library length of 200 base pairs. The mappability file is unpacked, unloading the map36/ folder with the mappability files contained in it. We create the alignability directory at align_athresh1_extension200/, where our reads were mapped with an alignability threshold of matching up to 1 region in the genome (otherwise they were filtered out). Download the necessary files, unpack your mappability directory, and create a directory to place your alignability files. Open a terminal and run the following, corresponding to the test dataset unpacked (a data/ directory will be created wherever you unpacked it). 

{{{
#open a terminal and download the necessary files and test dataset.  
#on the mac, use curl -O instead of wget
wget http://hgdownload.cse.ucsc.edu/goldenPath/hg18/bigZips/hg18.2bit
wget http://www.bios.unc.edu/~nrashid/map36.tgz
wget http://www.unc.edu/~nur2/zinbaweb/test_data.tgz

#unpack your mappability folder and test datasets
tar -xzvf map36.tgz
tar -xzvf test_data.tgz

#create your directory to hold your alignability files.  You can do this anyway you please, terminal command is below
mkdir align_athresh1_extension200
}}}

Enter R and generate your alignability directory in addition to your basecount file.

{{{
library(zinba)
generateAlignability(
   mapdir='map36/',
   outdir='align_athresh1_extension200/', 
   athresh=1,  
   extension=200,  
   twoBitFile='hg18.2bit		'
)   

basealigncount(
   inputfile='data/ctcfGM12878rep3chr22.taf', 
   outputfile='data/ctcfGM12878rep3chr22.basecount', 
   extension=200, 
   filetype='tagAlign',
   twoBitFile='hg18.2bit' )
}}}

Now, run your zinba analysis. Here we start from our mapped sample reads and our prepared files, build the datasets needed for analysis, run the mixture regression model considering only input control, and then run a peak boundary refinement to capture exact peak boundaries. This function is our pipeline function, tying together the smaller functions that work on different parts of the analysis. 

{{{
zinba(
  align='align_athresh1_extension200/',
  numProc=4,			
  seq='data/ctcfGM12878rep3chr22.taf',
  basecountfile='data/ctcfGM12878rep3chr22.basecount',
  filetype="tagAlign",
  outfile="data/faire",
  twoBit="hg18.2bit",
  extension=200,
  printFullOut=1,
  refinepeaks=1,	
  broad=F,
  input='data/inputGM12878rep3chr22.taf'
)
}}}

=Output Files=